{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///./mq.ts","webpack:///./src/lexer.ts","webpack:///./src/parser.ts","webpack:///./src/token.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;;;;;;;;AClFgB;AACC;AACT;;;;;;;;;;;;;;;;ACFQ;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,yFAAkD;AAC/E;AACA;AACA;AACA;AACA,iCAAiC,uEAAgC;AACjE;AACA;AACA,iCAAiC,wEAAiC;AAClE;AACA;AACA,iCAAiC,sEAA+B;AAChE;AACA;AACA,iCAAiC,sEAA+B;AAChE;AACA;AACA,iCAAiC,6EAAsC;AACvE;AACA;AACA,iCAAiC,8EAAuC;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACrDgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,sBAAsB","file":"bundle.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./mq.ts\");\n","import { Lexer } from \"./src/lexer\";\nimport { Parser } from \"./src/parser\";\nexport { Lexer, Parser };\n","import { TType } from \"./token\";\nexport class Lexer {\n    constructor(source) {\n        this.source = source;\n        this.cPointer = 0;\n    }\n    execute() {\n        const tokens = [];\n        let char = this.source[this.cPointer];\n        while (char) {\n            if (char === undefined) {\n                break;\n            }\n            else if (/[\\d\\.]/.test(char)) {\n                tokens.push({ value: this.extractNumber(), type: TType.NUMBER });\n                char = this.source[this.cPointer];\n            }\n            else {\n                if (char === \"+\") {\n                    tokens.push({ value: char, type: TType.PLUS });\n                }\n                else if (char === \"-\") {\n                    tokens.push({ value: char, type: TType.MINUS });\n                }\n                else if (char === \"*\") {\n                    tokens.push({ value: char, type: TType.MUL });\n                }\n                else if (char === \"/\") {\n                    tokens.push({ value: char, type: TType.DIV });\n                }\n                else if (char === \"(\") {\n                    tokens.push({ value: char, type: TType.OPEN_PAREN });\n                }\n                else if (char === \")\") {\n                    tokens.push({ value: char, type: TType.CLOSE_PAREN });\n                }\n                else if (!/\\s/.test(char)) {\n                    throw Error(\"Wrong syntax\");\n                }\n                char = this.source[++this.cPointer];\n            }\n        }\n        return tokens;\n    }\n    extractNumber() {\n        let char = this.source[this.cPointer];\n        let number = \"\";\n        while (/[\\d\\.]/.test(char)) {\n            number += char;\n            char = this.source[++this.cPointer];\n        }\n        return parseFloat(number);\n    }\n}\n","import { TType } from \"./token\";\n/**\n * expression = factor ((PLUS|MINUS) factor)*\n * factor = term ((MUL|DIV) term) *\n * term = NUMBER | OPEN_PAREN expression CLOSE_PAREN | (PLUS|MINUS) expression\n */\nexport class Parser {\n    constructor(tokens) {\n        this.tokens = tokens;\n        this.cPointer = 0;\n    }\n    expression() {\n        let node = this.factor();\n        let token = this.currentToken;\n        while (token && (token.type === TType.PLUS || token.type === TType.MINUS)) {\n            this.cPointer += 1;\n            node = { left: node, operator: token, right: this.factor() };\n            token = this.currentToken;\n        }\n        return node;\n    }\n    factor() {\n        let node = this.term();\n        let token = this.currentToken;\n        while (token && (token.type === TType.MUL || token.type === TType.DIV)) {\n            this.cPointer += 1;\n            node = { left: node, operator: token, right: this.factor() };\n            token = this.currentToken;\n        }\n        return node;\n    }\n    term() {\n        let token = this.currentToken;\n        if (token.type === TType.OPEN_PAREN) {\n            this.cPointer += 1;\n            const node = this.expression();\n            this.cPointer += 1;\n            return node;\n        }\n        else if (token.type === TType.PLUS || token.type === TType.MINUS) {\n            this.cPointer += 1;\n            return { operator: token, right: this.expression() };\n        }\n        else {\n            this.cPointer += 1;\n            return token;\n        }\n    }\n    get currentToken() {\n        return this.tokens[this.cPointer];\n    }\n    get nextToken() {\n        return this.tokens[this.cPointer + 1];\n    }\n}\n","export var TType;\n(function (TType) {\n    TType[TType[\"NUMBER\"] = 0] = \"NUMBER\";\n    TType[TType[\"PLUS\"] = 1] = \"PLUS\";\n    TType[TType[\"MINUS\"] = 2] = \"MINUS\";\n    TType[TType[\"MUL\"] = 3] = \"MUL\";\n    TType[TType[\"DIV\"] = 4] = \"DIV\";\n    TType[TType[\"OPEN_PAREN\"] = 5] = \"OPEN_PAREN\";\n    TType[TType[\"CLOSE_PAREN\"] = 6] = \"CLOSE_PAREN\";\n})(TType || (TType = {}));\n"],"sourceRoot":""}