// program = (declaration)*
// declaration = classDeclaration | function | varDeclaration | statement
// classDeclaration = IDENTIFIER-name (LESS IDENTIFIER-super)? LEFT_BRACE (function-method)* RIGHT_BRACE
// statement = forStatement | ifStatement | printStatement | returnStatement | whileStatement | block | expressionStatement
// forStatement = LEFT_PAREN (varDeclaration | expressionStatement | SEMICOLON) expression? SEMICOLON expression? RIGHT_PAREN statement
// ifStatement = LEFT_PAREN expression RIGHT_PAREN statement (ELSE statement)?
// expression = statement
// printStatement = expression SEMICOLON
// returnStatement = expression? SEMICOLON
// varDeclaration = IDENTIFIER (EQUAL expression)? SEMICOLON
// whileDeclaration = LEFT_PAREN expression RIGHT_PAREN statement
// expressionStatement = expression SEMICOLON
// function = IDENTIFIER-name LEFT_PAREN (IDENTIFIER-param COMMA)* RIGHT_PAREN block
// block = (declaration)* RIGHT_BRACE
// assigment = or (EQUAL or)?
// or = and (OR and)*
// and = equality (AND equality)*
// equality = comparison ((BANG_EQUAL | EQUAL_EQUAL) comparison)*
// comparison = addition ((GREATER | GREATER_EQUAL | LESS | LESS_EQUAL) addition)*
// addition = multiplication ((MINUS | PLUS) multiplication)*
// multiplication = unary ((SLASH | STAR) unary)*
// unary = ((BANG | MINUS) unary) | call
// call = primary ((LEFT_PAREN finish_call) | (DOT IDENTIFIER))*
// finish_call = (expression COMMA)* RIGHT_PAREN
// primary = TRUE | FALSE | NIL | NUMBER | STRING | SUPER | THIS | IDENTIFIER | LEFT_PAREN expression RIGHT_PAREN
